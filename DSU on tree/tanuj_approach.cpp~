/* Rishabh Arora
   IIIT-Hyderabad */

#include <bits/stdc++.h>
using namespace std;

typedef pair<int,int> II;
typedef vector<int> VI;
typedef vector<II> VII;
typedef long long int LL;
typedef unsigned long long int ULL;

#define MAXSIZE 100005
#define mod 1000000007
#define rep(i, a, b) for(i = a; i < b; i++)
#define rev(i, a, b) for(i = a; i > b; i--)
#define INF INT_MAX
#define PB push_back
#define MP make_pair
#define F first
#define S second
#define SET(a,b) memset(a, b, sizeof(a))

//debugging statements
#define TRACE
#ifdef TRACE
#define trace(...) __f(#__VA_ARGS__, __VA_ARGS__)
template <typename Arg1>
void __f(const char* name, Arg1&& arg1){
	cerr << name << " : " << arg1 << std::endl;
}
template <typename Arg1, typename... Args>
void __f(const char* names, Arg1&& arg1, Args&&... args){
	const char* comma = strchr(names + 1, ',');cerr.write(names, comma - names) << " : " << arg1<<" | ";__f(comma+1, args...);
}
#else
#define trace(...)
#endif

const int N = 1e5+2;

int ans[N], c[N], ac[N], sub[N], bigchild[N];
bool vis[N];
vector<VI> g;
map<int, int>* cnt[N];

void dfs0(int v)
{
  vis[v] = true;
  sub[v] = 1;
  bigchild[v] = -1;
  int Max = -1;
  for(auto u: g[v])
    if(!vis[u])
      {
	dfs0(u);
	sub[v] += sub[u];
	if(sub[u] > Max)
	  {
	    Max = sub[u];
	    bigchild[v] = u;
	  }
      }
  vis[v] = false;
  return;
}

void f(int v)
{
  ac[v] = 0, ans[v] = 0;
  vis[v] = true;
  for(auto u: g[v])
    if( !vis[u] )
      f(u);
  
  if(bigchild[v] != -1)
    { 
      cnt[v] = cnt[bigchild[v]];
      ans[v] = ans[bigchild[v]];
      ac[v] = ac[bigchild[v]];
    }
  
  (*cnt[v])[c[v]]++;

  if( (*cnt[v])[c[v]] > ac[v])
    {
      ans[v] = c[v];
      ac[v] = (*cnt[v])[c[v]];
    }
  else if((*cnt[v])[c[v]] == ac[v])
    {
      ans[v] += c[v];
    }

  for(auto u : g[v])
    if(u != bigchild[v] && (!vis[u]))
      for(auto x : *cnt[u])
	{
	  (*cnt[v])[x.F] += x.S;
	  
	  if( (*cnt[v])[x.F] > ac[v])
	    {
	      ans[v] = x.F;
	      ac[v] = (*cnt[v])[x.F];
	    }
	  else if((*cnt[v])[x.F] == ac[v])
	    {
	      ans[v] += x.F;
	    }
	}
  vis[v] = false;
  return;
}
int main() {

  ios::sync_with_stdio(false);	
  cin.tie(NULL);

  int n;

  cin>>n;

  int i;

  rep(i, 1, n+1)
    cin>>c[i];

  int u, v;

  g.resize(n+1);
  
  rep(i, 1, n)
    {
      cin>>u>>v;
      g[u].PB(v);
      g[v].PB(u);
    }

  dfs0(1);
  f(1);
  rep(i, 1, n+1)
    cout<<ans[i]<<" ";
  cout<<endl;
  
  return 0;
}
